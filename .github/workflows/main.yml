name: Release

on:
  push:
    tags:
      - "*"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-mac:
    name: MacOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Yarn
        run: npm install --location=global yarn
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build MacOS Bundles
        run: yarn build
      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: mac-bundles
          path: ./src-tauri/target/release/bundle

  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update Package repository
        run: sudo apt-get update
      - name: Install Tauri Dependencies
        run: sudo apt-get install -y
          libwebkit2gtk-4.0-dev
          build-essential
          curl
          wget
          libssl-dev
          libgtk-3-dev
          libayatana-appindicator3-dev
          librsvg2-dev
      - name: Install rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Yarn
        run: npm install --location=global yarn
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build Linux Bundles
        run: yarn build
      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: linux-bundles
          path: ./src-tauri/target/release/bundle

  build-windows:
    name: Windows Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Cargo
        uses: actions-rs/cargo@v1
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Yarn
        run: npm install --location=global yarn
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build Windows Bundles
        run: yarn build
      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: windows-bundles
          path: ./src-tauri/target/release/bundle

  get-version:
    name: Get Current Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.prop }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "package.json"
          prop_path: "version"

  release:
    name: Create a Release
    needs: get-version
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get Changelog
        id: get-changelog
        run: echo "::set-output name=section::$(sed -n '/### \[${{ needs.get-version.outputs.version }}\]/,/### \[/p' CHANGELOG.md | sed 1,3d | sed '$d' | sed '$d')"
      - name: Create a Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ needs.get-version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: ${{ steps.get-changelog.outputs.section }}

  release-assets-mac:
    name: Upload MacOS Bundles
    needs:
      - build-mac
      - get-version
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Download Bundles
        uses: actions/download-artifact@v3
        with:
          name: mac-bundles
          path: ./bundle
      - name: Locate Typino.dmg
        id: locate-typino-dmg
        run: echo "::set-output name=path::$(echo bundle/dmg/Typino*.dmg)"
      - name: Upload Typino.dmg
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.locate-typino-dmg.outputs.path }}
          asset_name: Typino-${{ needs.get-version.outputs.version }}.dmg
          asset_content_type: application/gzip

  release-assets-linux:
    name: Upload Linux Bundles
    needs:
      - build-linux
      - release
      - get-version
    runs-on: ubuntu-latest
    steps:
      - name: Download Bundles
        uses: actions/download-artifact@v3
        with:
          name: linux-bundles
          path: ./bundle
      - name: Locate Typino.deb
        id: locate-typino-deb
        run: echo "::set-output name=path::$(echo bundle/deb/typino*.deb)"
      - name: Locate Typino.AppImage
        id: locate-typino-appimage
        run: echo "::set-output name=path::$(echo bundle/appimage/typino*.AppImage)"
      - name: Upload Typino.deb
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.locate-typino-deb.outputs.path }}
          asset_name: Typino-${{ needs.get-version.outputs.version }}.deb
          asset_content_type: application/gzip
      - name: Upload Typino.AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.locate-typino-appimage.outputs.path }}
          asset_name: Typino-${{ needs.get-version.outputs.version }}.AppImage
          asset_content_type: application/gzip

  release-assets-windows:
    name: Upload Windows Bundles
    needs:
      - build-windows
      - release
      - get-version
    runs-on: ubuntu-latest
    steps:
      - name: Download Bundles
        uses: actions/download-artifact@v3
        with:
          name: windows-bundles
          path: ./bundle
      - name: Locate Typino.msi
        id: locate-typino-msi
        run: echo "::set-output name=path::$(echo bundle/msi/Typino*.msi)"
      - name: Upload Typino.msi
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.locate-typino-msi.outputs.path }}
          asset_name: Typino-${{ needs.get-version.outputs.version }}.msi
          asset_content_type: application/gzip
