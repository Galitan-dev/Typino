name: Release

on:
  push:
    branches:
      - "main"

jobs:
  
  build-mac:
    permissions:
      contents: write
    name: MacOS Build
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: Install NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install Yarn
      run: npm install --location=global yarn
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
    - name: Cache Yarn
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install Dependencies
      run: yarn install
    - name: Build MacOS Bundles
      run: yarn build

  build-linux:
    permissions:
      contents: write
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Missing Packages
      run: sudo apt-get install -y libdbus-1-dev pkg-config
    - name: Install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: Install NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install Yarn
      run: npm install --location=global yarn
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
    - name: Cache Yarn
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install Dependencies
      run: yarn install
    - name: Build Linux Bundles
      run: yarn build

  build-windows:
    permissions:
      contents: write
    name: Windows Build
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Install Cargo
      uses: actions-rs/cargo@v1
    - name: Install NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install Yarn
      run: npm install --location=global yarn
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
    - name: Cache Yarn
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install Dependencies
      run: yarn install
    - name: Build Windows Bundles
      run: yarn build
